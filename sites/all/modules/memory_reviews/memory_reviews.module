<?php

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function memory_reviews_menu() {
  $items = array();

  $items['admin/memory/reviews'] = array(
    'title' => t('Memory - Reviews'),
    'description' => t('Memory - Reviews manager'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('memory_reviews_admin_reviews_manager'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function memory_reviews_admin_reviews_manager($form, &$form_state) {

  global $base_url;

  $form['reviews_title'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('reviews_title'),
    '#title' => t('Title'),
    '#weight' => 1,
    '#required' => TRUE,
  );

  // Trustpilot image
  $form['reviews_trustpilot'] = array(
    '#type'          => 'media',
    '#title'         => 'Trustpilot image',
    '#theme'         => 'media_widget', // Without that, you only get text input
    '#default_value' => variable_get('reviews_trustpilot'), //The fid
    '#media_options' => array(
      'global' => array(
        'file_directory'  => 'icons_folder',
        'enabledPlugins'  => array( // Not needed if you want to enable all the plugins
          'upload',
          'media_default--media_browser_my_files'
        ),
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize'    => '2 MB',
        'uri_scheme'      => 'public',
        'types'           => array('image'),
        'schemes'         => array(
          'public' => 'public',
        ),
      ),
    ),
    '#weight' => 2,
  );

  // Configurable width for the trustpilot image
  $form['reviews_trustpilot_width'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name
      ' min' => '0',
      ' max' => '1500'
    ),
    '#default_value' => variable_get('reviews_trustpilot_width', 160),
    '#title' => t('Width of the Trustpilot image'),
    '#description' => t('This width is expressed in pixels. The default width is set to 160px.'),
    '#weight' => 3,
  );

  // Sliding time between each review (in seconds)
  $form['review_sliding_time'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name
    ),
    '#default_value' => variable_get('review_sliding_time'),
    '#title' => t('Sliding time'),
    '#description' => t('Sliding time between each review. The time is expressed in seconds.'),
    '#required' => TRUE,
    '#weight' => 4,
  );

  // Sliding time between each review (in seconds)
  $form['review_sliding_time'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name
    ),
    '#default_value' => variable_get('review_sliding_time'),
    '#title' => t('Sliding time (in s)'),
    '#description' => t('Sliding time between each review. The time is expressed in seconds.'),
    '#required' => TRUE,
    '#weight' => 5,
  );

  // Sliding speed between each review (in seconds)
  $form['review_sliding_speed'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name
    ),
    '#default_value' => variable_get('review_sliding_speed'),
    '#title' => t('Sliding speed (in s)'),
    '#description' => t('Sliding speed between each review. The speed is expressed in seconds.'),
    '#required' => TRUE,
    '#weight' => 6,
  );

  $form['reviews_nb_reviews'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      ' type' => 'number', // insert space before attribute name
      ' min' => '0',
    ),
    '#default_value' => variable_get('reviews_nb_reviews', 9),
    '#title' => t('Number of reviews'),
    '#description' => t('By default the number of reviews equals to 9 but if you can change this number filling this field then save the configuration.'),
    '#required' => TRUE,
    '#weight' => 7,
  );

  /* Review */
  for( $i = 1 ; $i <= variable_get('reviews_nb_reviews') ; $i++ ){

    $review_nbr = variable_get('review_' . $i, array());

    // Fieldset
    $form['review_' . $i] = array(
      '#type' => 'fieldset',
      '#title' => (!empty($review_nbr['person'])) ? t('Review - ' . $review_nbr['person']) : t('Review'),
      '#weight' => 7 + $i,
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#prefix' =>
        '<div style="position:relative;">' .
          '<p style="position: absolute;top: 7px;right: 10px;height: auto;margin: 0;">' .
          $review_nbr['weight'] .
          '</p>',
      '#suffix' => '</div>',
    );

    // Person name
    $form['review_' . $i]['person'] = array(
      '#type' => 'textfield',
      '#title' => t('Lastname and firstname'),
      '#default_value' => $review_nbr['person'],
      '#required' => FALSE,
      '#weight' => 1,
    );

    // Notation
    $form['review_' . $i]['notation'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
        ' max' => '5',
      ),
      '#default_value' => $review_nbr['notation'],
      '#title' => t('Notation /5'),
      '#required' => FALSE,
      '#weight' => 2,
    );

    // Comment (review description)
    $form['review_' . $i]['description'] = array(
      '#type' => 'text_format',
      '#format' => 'wysiwyg',
      '#default_value' => $review_nbr['description']['value'],
      '#title' => t('Description'),
      '#required' => FALSE,
      '#weight' => 3,
    );

    // Nature of the trip
    $form['review_' . $i]['nature'] = array(
      '#type' => 'textfield',
      '#title' => t('Nature of the trip'),
      '#default_value' => $review_nbr['nature'],
      '#required' => FALSE,
      '#weight' => 4,
    );

    // Date
    $form['review_' . $i]['date'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'date', // insert space before attribute name
      ),
      '#default_value' => $review_nbr['date'],
      '#title' => t('Date'),
      '#required' => FALSE,
      '#weight' => 5,
    );

    $form['review_' . $i]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $review_nbr['weight'],
      '#delta' => 50,
      '#description' => 'Review with the higher weight will be display in first.',
      '#weight' => 6,
    );
  }

  return system_settings_form($form);
}

/**
 * Implement hook_theme()
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function memory_reviews_theme($existing, $type, $theme, $path) {
  return array(
    'tpl_memory_reviews' => array(
      'template' => 'tpl/memory_reviews',
      'path' => drupal_get_path('module', 'memory_reviews'),
      'variables' => array('infos' => NULL),
    ),
  );
}

/**
 * @return mixed
 */
function memory_reviews_block_info() {

  $blocks['memory_reviews'] = array(
    'info' => t('Memory reviews'),
    'weight' => 1,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
  );

  return $blocks;
}

/**
 * @param string $delta
 * @return array
 * @throws Exception
 */
function memory_reviews_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'memory_reviews':

      $data["reviews_title"] = variable_get('reviews_title', array());

      /*
       * $arrayName['image'] correspond to the fid
       * Load the file by its fid.
       * Create the URL file by using the file URI
       */
      if(variable_get('reviews_trustpilot', array()) != 0){ // Don't create a data[] if there is no image

        $file = file_load(variable_get('reviews_trustpilot', array()));
        $url = file_create_url($file->uri);
        $data['reviews_trustpilot'] = $url;
      }

      $data['reviews_trustpilot_width'] = variable_get('reviews_trustpilot_width');

      $arrayReviews = array();

      for ($i = 1; $i <= variable_get('reviews_nb_reviews'); $i++) {

        $arrayReview = variable_get('review_' . $i, array());

        if(!empty($arrayReview["person"])){
          array_push($arrayReviews, $arrayReview);
        }
      }

      // Order array by weight
      usort($arrayReviews, function($a, $b) {
        return $b['weight'] <=> $a['weight'];
      });

      $data['arrayReviews'] = $arrayReviews;

      $nb_reviews = count($arrayReviews);
      $review_sliding_time = variable_get('review_sliding_time', array());
      $review_sliding_speed = variable_get('review_sliding_speed', array());
      drupal_add_js(
        array(
          'memory_reviews' => array(
            'nb_reviews' => intval($nb_reviews),
            'review_sliding_time' => intval($review_sliding_time) * 1000,
            'review_sliding_speed' => intval($review_sliding_speed) * 1000,
          )
        ),
        array('type' => 'setting')
      );

      // Link the template
      $block['content']['#markup'] = theme('tpl_memory_reviews', $data);

      // Link a css file
      $block['content']['#attached']['css'][] = array(
        'data' => drupal_get_path('module', 'memory_reviews').'/css/memory_reviews.css',
        'type' => 'file'
      );

      // Link a js file
      $block['content']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'memory_reviews').'/js/memory_reviews.js',
        'type' => 'file'
      );
  }

  return $block;
}
