<?php

/**
 * Implementation of hook_menu()
 *
 * @return array
 */
function memory_blocks_menu() {
    $items = array();

    $items['admin/memory'] = array(
        'title' => t('Memory'),
        'description' => t('Memory - Global parameters'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_admin_global_parameters'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/social-networks-manager'] = array(
        'title' => t('Memory - Social networks list'),
        'description' => t('Memory - Social networks list manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_admin_social_networks_list_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/social-networks-manager/add'] = array(
        'title' => t('Add - Social network'),
        'description' => t('Add - Social network'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_admin_social_network_add_form'),
        'access arguments' => array('administer site configuration'),
//        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/social-networks-manager/social-network/%/edit'] = array(
        'title' => t('Memory - Social network'),
        'description' => t('Memory - Social network'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_admin_social_network_form'),
        'access arguments' => array('administer site configuration'),
//        'type' => MENU_NORMAL_ITEM
    );

    $items['admin/memory/top-destinations-manager'] = array(
        'title' => t('Memory - Top destinations'),
        'description' => t('Memory - Top destinations manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_top_destinations_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/top-activities-manager'] = array(
        'title' => t('Memory - Top activities'),
        'description' => t('Memory - Top activities manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_top_activities_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/slider-manager'] = array(
        'title' => t('Memory - Slider'),
        'description' => t('Memory - Slider manager'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_slider_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/activity-families-manager'] = array(
      'title' => t('Memory - Families of activity'),
      'description' => t('Memory - Families of activity'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('memory_blocks_activity_families_admin_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/3-columns-block-manager'] = array(
        'title' => t('Memory - 3 Columns block'),
        'description' => t('Memory - 3 Columns block'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_3_columns_block_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/all-destinations-page-manager'] = array(
        'title' => t('Memory - All destinations page'),
        'description' => t('Memory - All destinations page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_all_destinations_page_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/all-activities-page-manager'] = array(
        'title' => t('Memory - All activities page'),
        'description' => t('Memory - All activities page'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_all_activities_page_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/memory/intermediate-page-manager'] = array(
        'title' => t('Memory - Intermediate page'),
        'description' => t('Memory - Intermediate page activity to destination'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('memory_blocks_intermediate_page_admin_form'),
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
    );

//    // Ajax Callback to display activities thumbnails in all activities page.
//    $items['activity-categories/ajax'] = array(
//        'title' => 'Ajax callback',
//        'page callback' => 'ajax_load_more_activities_thumbnails',
//        'access arguments' => array('access content'),
//        'type' => MENU_CALLBACK,
//    );

    return $items;
}

//function ajax_load_more_activities_thumbnails(){
//
//    global $base_url;
//
//    // Include pathauto to clean a string for use in URLs
//    module_load_include('inc', 'pathauto', 'pathauto');
//
//    /* Load taxonomy to get the destination of the activity */
//    $vocabulary = taxonomy_vocabulary_machine_name_load('continent');
//    $taxonomy_tree = taxonomy_get_tree($vocabulary->vid);
//
//    $array_taxonomy_tree = array();
//    foreach ($taxonomy_tree as $tax_tree){
//        $array_taxonomy_tree[$tax_tree->tid]["tid"] = $tax_tree->tid;
//        $array_taxonomy_tree[$tax_tree->tid]["name"] = $tax_tree->name;
//        $array_taxonomy_tree[$tax_tree->tid]["path_alias"] = drupal_get_path_alias("taxonomy/term/".$tax_tree->tid);
//    }
//
//
//    /* Load node datas corresponding to activities */
//    // Query to retrieve every node with the type "activite"
//    $query = new EntityFieldQuery();
//    $entities = $query->entityCondition('entity_type', 'node')
//        ->propertyCondition('type', 'activite')
//        ->propertyCondition('status', 1)
//        ->propertyOrderBy('title', 'ASC')
//        ->execute();
//
//    // Array intended to contain every node ID
//    $nids = [];
//
//    foreach ($entities as $entity) {
//
//        foreach ($entity as $node){
//
//            // Retrieve and set into array each node ID with type "activite"
//            array_push($nids, $node->nid);
//        }
//    }
//
//    $activities_count = [];
//
//    for($i = 0 ; $i < count($nids) ; $i++){
//
//        // Retrieve all content of the node belonging to the activity category
//        $node = node_load($nids[$i]);
//
//        // Retrieve the fid (image ID) of the activity
//        $fid_activity = $node->field_img_activite['und'][0]['fid'];
//
//        if( isset($fid_activity) ){
//
//            // Load image by its fid
//            $file = file_load($fid_activity);
//            $img_url_activity = file_create_url($file->uri);
//        }
//
//        // Clean the title of the node (activity) to use as a part of the URL
//        $clean_string_to_url = pathauto_cleanstring($node->field_activity_title['und'][0]['value']);
//
//        $activities_count[$node->field_activity_title['und'][0]['value']]["title"] = $node->field_activity_title['und'][0]['value'];
//        $activities_count[$node->field_activity_title['und'][0]['value']]["count"] += 1;
//        $activities_count[$node->field_activity_title['und'][0]['value']]["img_alt_text"] = $node->field_img_activite['und'][0]['field_file_image_alt_text']['und'][0]['value'];
//        $activities_count[$node->field_activity_title['und'][0]['value']]["img_uri"] = $img_url_activity;
//        $activities_count[$node->field_activity_title['und'][0]['value']]["price"] = $node->field_price_prestation['und'][0]['value'];
//        $activities_count[$node->field_activity_title['und'][0]['value']]["vid"] = $node->vid;
//        $activities_count[$node->field_activity_title['und'][0]['value']]["path"] = $base_url."/".drupal_get_path_alias('node/'.$node->vid);
//        $activities_count[$node->field_activity_title['und'][0]['value']]["destination"] = $array_taxonomy_tree[$node->field_acti_content_desti['und'][0]['tid']]["name"];
//        $activities_count[$node->field_activity_title['und'][0]['value']]["destination_path"] = $array_taxonomy_tree[$node->field_acti_content_desti['und'][0]['tid']]["path_alias"];
//        $activities_count[$node->field_activity_title['und'][0]['value']]["intermediate_path"] = $clean_string_to_url;
//    }
//
//    $actualNbThumbnails = $_POST['actualNbThumbnails'];
//
//    $totalNbThumbnails = sizeof($activities_count);
//
//    $arrayThumbnailsToAjax = [];
//    $counterNbThumbnails = 0;
//
//    foreach ($activities_count as $activity_count){
//
//        if($counterNbThumbnails == (variable_get('all_act_nb_thumbnails') + $actualNbThumbnails)){
//            break;
//        }else{
//
//            $arrayThumbnailsToAjax[$activity_count['title']]['title'] = $activity_count['title'];
//            $arrayThumbnailsToAjax[$activity_count['title']]['img_alt_text'] = $activity_count['img_alt_text'];
//            $arrayThumbnailsToAjax[$activity_count['title']]['img_uri'] = $activity_count['img_uri'];
//            $arrayThumbnailsToAjax[$activity_count['title']]['intermediate_path'] = $activity_count['intermediate_path'];
//            $arrayThumbnailsToAjax[$activity_count['title']]['base_url'] = $base_url;
//
//            if($totalNbThumbnails <= (variable_get('all_act_nb_thumbnails') + $actualNbThumbnails)){
//                $arrayThumbnailsToAjax[$activity_count['title']]['is_every_thumbnails_loaded'] = true;
//            }else{
//                $arrayThumbnailsToAjax[$activity_count['title']]['is_every_thumbnails_loaded'] = false;
//            }
//        }
//
//        $counterNbThumbnails++;
//    }
//
//    drupal_json_output($arrayThumbnailsToAjax);
//}

function memory_blocks_init() {

    drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_basic_forms.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

    drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_menu.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_menu.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));

//    // If user is on destinations page, link css file
//    if(preg_match("/^.*\/destinations\/.*$/", $_SERVER['REQUEST_URI'])){
//
//        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/destination.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
//        drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/destination.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
//    }

    // If user is on activity page, link css file
    if(preg_match("/^.*\/destinations\/.*\/.*$/", $_SERVER['REQUEST_URI'])){

        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_activity.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
        drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_activity.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
    }

    // If user is on contact page, link css file
    if(preg_match("/^.*\/contact$/", $_SERVER['REQUEST_URI'])){

        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_contact.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
        drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_contact.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
    }

    // If user click on destinations tab, link css and js file
    if(preg_match("/^.*\/destinations$/", $_SERVER['REQUEST_URI'])){

        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory-all-destinations.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
        drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory-all-destinations.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
    }

    // If user click on activities tab, link css and js file
    if(preg_match("/^.*\/activity-categories/", $_SERVER['REQUEST_URI'])){
        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory-all-activities.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    }

    // If user is on activities intermediate page, link css and js file
    if(preg_match("/^.*\/activites\/.*$/", $_SERVER['REQUEST_URI'])){
        drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory-act-dest.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    }

    // Add style and javascript for destinations page containing activities thumbnails
    drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_destinations.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_destinations.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));

    // Add style and javascript for activities page containing activities thumbnails
    drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_activities.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

    drupal_add_css(drupal_get_path('module', 'memory_blocks') . '/css/memory_responsive.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
    drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_responsive.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));

    // Add JS file to manage activity filters (Pack, Activité de jour, de nuit, transfert et hébergement)
    drupal_add_js(drupal_get_path('module', 'memory_blocks') . '/js/memory_activity_filters.js', array('group' => JS_DEFAULT, 'every_page' => TRUE));
}

/**
 * Implements memory_blocks_admin_global_parameters()
 */
function memory_blocks_admin_global_parameters(){
    // drupal_goto("admin/Memory/social-networks-manager");

    $form['global_parameter_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Panier utilisateur - E-mail'),
      '#description' => t('E-mail d\'envoi du panier utilisateur.'),
      '#default_value' => variable_get('global_parameter_email'),
      '#maxlength' => 512,
      '#weight' => 1,
    );

    return system_settings_form($form);
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function memory_blocks_admin_social_networks_list_form($form, &$form_state) {

    $header = array(
        'id' => array('data' => t('id'), 'field' => 'msn.id'),
        'name' => array('data' => t('name'), 'field' => 'msn.name'),
        'url' => array('data' => t('url'), 'field' => 'msn.url'),
        'icon' => array('data' => t('icon'), 'field' => 'msn.icon'),
        'operations' => array('data' => t('Operations')),
    );

    $query = db_select('memory_social_networks', 'msn');
    user_build_filter_query($query);

    $count_query = clone $query;
    $count_query->addExpression('COUNT(msn.id)');

    $query = $query->extend('PagerDefault')->extend('TableSort');
    $query
        ->fields('msn', array('id', 'name', 'url', 'icon'))
        ->limit(50)
        ->orderByHeader($header)
        ->setCountQuery($count_query);
    $result = $query->execute();

    $destination = drupal_get_destination();

    foreach ($result as $social_network) {

        $options[$social_network->id] = array(
            'id' => $social_network->id,
            'name' => $social_network->name,
            'url' => $social_network->url,
            'icon' => $social_network->icon,
            'operations' => array('data' => array('#type' => 'link', '#title' => t('edit'), '#href' => "admin/memory/social-networks-manager/social-network/$social_network->id/edit", '#options' => array('query' => $destination))),
        );
    }

    $form['accounts'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $options,
        '#empty' => t('No social network available.'),
    );

    return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function memory_blocks_admin_social_network_add_form($form, &$form_state){

    $form['social_networks']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#weight' => 1,
    );

    $form['social_networks']['url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL ou adresse e-mail'),
        '#weight' => 2,
    );

    $form['social_networks']['icon'] = array(
        '#type' => 'textfield',
        '#title' => t('Icône'),
        '#description' => t(
            'Choississez l\'icône représentant votre média sur : '.
            '<em>https://fontawesome.com/v4.7.0/icons</em>'.
            '<br> Puis renseigné le nom de l\'icône. '.
            '<em>Exemple : fa-facebook</em>'
        ),
        '#weight' => 3,
    );

    $form['social_networks']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#weight' => 10,
    );

    $form['social_networks']['submit']['#submit'][] = 'memory_blocks_admin_social_network_add_form_submit';

    return $form;
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function memory_blocks_admin_social_network_add_form_submit($form, &$form_state){

    if(
        $form_state['values']['name'] == "" ||
        $form_state['values']['url'] == "" ||
        $form_state['values']['icon'] == ""
    ){
        drupal_set_message(t('Veuillez remplir toutes les informations.'));
    }else{

        db_insert('memory_social_networks')->fields(
            array(
                'name' => $form_state['values']['name'],
                'url' => $form_state['values']['url'],
                'icon' => $form_state['values']['icon'],
            )
        )
            ->execute();

        // Display a message saying that datas are set in database.
        drupal_set_message(t('Les données renseignées ont été enregistrées.'));
    }
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function memory_blocks_admin_social_network_form($form, &$form_state){

    $fullUrl  = $_SERVER["REQUEST_URI"];
    $urlId = explode("/social-network/", $fullUrl)[1];
    $urlId = explode("/", $urlId)[0];

    $query = db_select('memory_social_networks', 'msn');
    $query->fields('msn', array('id', 'name', 'url', 'icon'));
    $query->condition('id', $urlId, '=');
    $results = $query->execute();

    foreach ($results as $result) {

        $form['social_networks']['id'] = array(
            '#type' => 'hidden',
            '#value' => $result->id,
        );

        $form['social_networks']['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $result->name,
            '#weight' => 1,
        );

        $form['social_networks']['url'] = array(
            '#type' => 'textfield',
            '#title' => t('URL ou adresse e-mail'),
            '#default_value' => $result->url,
            '#weight' => 2,
        );

        $form['social_networks']['icon'] = array(
            '#type' => 'textfield',
            '#title' => t('Icône'),
            '#default_value' => $result->icon,
            '#description' => t('Choississez l\'icône représentant votre média sur : https://fontawesome.com/v4.7.0/icons'),
            '#weight' => 3,
        );

    }

    $form['social_networks']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Valider'),
        '#weight' => 10,
    );

    $form['social_networks']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Supprimer'),
        '#weight' => 11,
    );

    $form['social_networks']['submit']['#submit'][] = 'memory_blocks_admin_social_networks_form_submit';
    $form['social_networks']['delete']['#submit'][] = 'memory_blocks_admin_social_networks_form_delete';

    return $form;
}

/**
 * @param $form
 * @param $form_state
 */
function memory_blocks_admin_social_networks_form_submit($form, &$form_state){

    db_update('memory_social_networks')
        ->condition('id', $form_state['values']['id'],'=')
        ->fields(array(
            'name' => $form_state['values']['name'],
            'url' => $form_state['values']['url'],
            'icon' => $form_state['values']['icon'],
        ))
        ->execute();

    drupal_set_message("Les changements ont été pris en compte.");
}

/**
 * @param $form
 * @param $form_state
 */
function memory_blocks_admin_social_networks_form_delete($form, &$form_state){

    db_delete('memory_social_networks')
        ->condition('id', $form_state['values']['id'], '=')
        ->execute();

    drupal_set_message("Le média a été supprimé.");
}

/**
 * Implement hook_theme()
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function memory_blocks_theme($existing, $type, $theme, $path) {
    return array(
        'tpl_social_networks' => array(
            'template' => 'tpl/social_networks',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_top_destinations' => array(
            'template' => 'tpl/memory_top_destinations',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_top_activities' => array(
            'template' => 'tpl/memory_top_activities',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_slider' => array(
            'template' => 'tpl/memory_slider',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_go_top_page' => array(
            'template' => 'tpl/memory_go_top_page',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_3_columns_block' => array(
            'template' => 'tpl/memory_3_columns_block',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
        'tpl_memory_switch_activities' => array(
            'template' => 'tpl/memory_switch_activities',
            'path' => drupal_get_path('module', 'memory_blocks'),
            'variables' => array('infos' => NULL),
        ),
    );
}

/**
 * @return mixed
 */
function memory_blocks_block_info() {

    $blocks['social_networks'] = array(
      'info' => t('Social Networks'),
      'weight' => 1,
      'status' => 1,
      'region' => 'content',
//      'region' => 'header_top',
//      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    );

    $blocks['memory_top_destinations'] = array(
      'info' => t('Memory Top Destinations'),
      'weight' => 3,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    );

    $blocks['memory_top_activities'] = array(
      'info' => t('Memory Top Activities'),
      'weight' => 4,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    );

    $blocks['memory_slider'] = array(
      'info' => t('Memory Slider'),
      'weight' => 1,
      'status' => 1,
      'region' => 'slideshow',
      'visibility' => BLOCK_VISIBILITY_LISTED,
        'pages' => '<front>',
    );

    $blocks['memory_go_top_page'] = array(
      'info' => t('Memory Go Top Page'),
      'weight' => 5,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    );

    $blocks['memory_3_columns_block'] = array(
      'info' => t('Memory 3 Columns block'),
      'weight' => 7,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => '<front>',
    );

    $blocks['memory_switch_activities'] = array(
      'info' => t('Memory switch activities'),
      'weight' => 8,
      'status' => 1,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'pages' => 'destinations/*/*',
    );

    return $blocks;
}

/**
 * @param string $delta
 * @return array
 * @throws Exception
 */
function memory_blocks_block_view($delta = '') {

    $block = array();

    switch ($delta) {
        case 'social_networks':

            $query = db_select('memory_social_networks', 'msn');
            $query->fields('msn', array('name', 'url', 'icon'));
            $data['resultsSocialNetworks'] = $query->execute();

            // Link the template
            $block['content']['#markup'] = theme('tpl_social_networks', $data);

            // Link a css file 
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/social_networks.css',
                'type' => 'file'
            );

            break;
        case 'memory_top_destinations':

            $data['title'] = variable_get("top_destinations_title");
            $description = variable_get("top_destinations_description");
            $data['description'] = $description['value'];

            $arrayAllDestinations = array();

            for ($i = 1; $i <= variable_get('top_destinations_nb'); $i++) {

              $arrayTopDestinations = variable_get('top_destinations_' . $i, array());

              if($arrayTopDestinations["display"] == 0){ // Display = published

                if (
                  !empty($arrayTopDestinations['name']) &&
                  !empty($arrayTopDestinations['image']) &&
                  !empty($arrayTopDestinations['url'])
                ){
                  /*
                   * $arrayName['image'] correspond to the fid
                   * Load the file by its fid.
                   * Create the URL file by using the file URI
                   */
                  $file = file_load($arrayTopDestinations['image']);
                  $url = image_style_url("large", $file->uri);
                  $arrayTopDestinations['image'] = $url;

                  array_push($arrayAllDestinations, $arrayTopDestinations);
                }
              }
            }

            // Order array by weight
            usort($arrayAllDestinations, function($a, $b) {
              return $b['weight'] <=> $a['weight'];
            });

            $data['arrayAllDestinations'] = $arrayAllDestinations;

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_top_destinations', $data);

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/memory_top_destinations.css',
                'type' => 'file'
            );

            break;
        case 'memory_top_activities':

            $data['title'] = variable_get("top_activities_title");
            $description = variable_get("top_activities_description");
            $data['description'] = $description['value'];

            $arrayAllActivities = array();

            for ($i = 1; $i <= variable_get('top_activities_nb'); $i++) {

              $arrayTopActivities = variable_get('top_activities_' . $i, array());

              if($arrayTopActivities["display"] == 0){ // Display = published

                if (
                  !empty($arrayTopActivities['name']) &&
                  !empty($arrayTopActivities['image']) &&
                  !empty($arrayTopActivities['url'])
                ){
                  /*
                   * $arrayName['image'] correspond to the fid
                   * Load the file by its fid.
                   * Create the URL file by using the file URI
                   */
                  $file = file_load($arrayTopActivities['image']);
                  $url = image_style_url("large", $file->uri);
                  $arrayTopActivities['image'] = $url;

                  array_push($arrayAllActivities, $arrayTopActivities);
                }
              }
            }

            // Order array by weight
            usort($arrayAllActivities, function($a, $b) {
              return $b['weight'] <=> $a['weight'];
            });

            $data['arrayAllActivities'] = $arrayAllActivities;

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_top_activities', $data);

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/memory_top_activities.css',
                'type' => 'file'
            );

            break;
        case 'memory_slider':

            /* Slider - Global options */
            $data['slider_height'] = variable_get('slider_height');

            $data['slider_type'] = variable_get('slider_type');

            drupal_add_js(array('memory_blocks' => array('slider_type' => variable_get("slider_type"))), array('type' => 'setting'));

            /* Slider images */
            if (variable_get('slider_type') == "0") {

                $slider = variable_get('slider', array());

                $data["array_size_slider"] = sizeof($slider);

                for ($i = 1; $i <= sizeof($slider); $i++) {

                    $data["slider_" . $i . "_name"] = $slider['image_container_' . $i]['name'];

                    /*
                     * $arrayName['image'] correspond to the fid
                     * Load the file by its fid.
                     * Create the URL file by using the file URI
                     */
                    $file = file_load($slider['image_container_' . $i]['image']);
                    $url = file_create_url($file->uri);
                    $data["slider_" . $i . "_image"] = $url;

                    $data["slider_" . $i . "_redirection_link"] = $slider['image_container_' . $i]['redirection_link'];
                }

                drupal_add_js(array('memory_blocks' => array('slider_time_interval' => variable_get("slider_time_interval"))), array('type' => 'setting'));
            }

            /* Vidéo */
            if (variable_get('slider_type') == "1") {

                $video = variable_get('video', array());
                $video_name = $video['name'];
                $data['video_url_intern'] = $video['url_intern'];
                $data['video_autoplay'] = $video['autoplay'];
                $data['video_controls'] = $video['controls'];
                $data['video_loop'] = $video['loop'];
                $data['video_poster'] = $video['poster'];
                $data['video_redirection_link'] = $video['redirection_link'];

                if ($video['video'] != 0) {

                    $file = file_load($video['video']);
                    $url = file_create_url($file->uri);
                    $data['video_video'] = $url;
                }

                if ($video['poster_image'] != 0) {

                    $file = file_load($video['poster_image']);
                    $url = file_create_url($file->uri);
                    $data['video_poster_image'] = $url;
                }
            }

            /* Still image */
            if (variable_get('slider_type') == "2") {

                $still_img = variable_get('still_img', array());
                $data['still_img_name'] = $still_img['name'];

                /*
                 * $arrayName['image'] correspond to the fid
                 * Load the file by its fid.
                 * Create the URL file by using the file URI
                 */
                $file = file_load($still_img['image']);
                $url = file_create_url($file->uri);
                $data['still_img_image'] = $url;

                $data['still_img_redirection_link'] = $still_img['redirection_link'];
            }

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_slider', $data);

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/memory_slider.css',
                'type' => 'file'
            );

            // Link a js file
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/js/memory_slider.js',
                'type' => 'file'
            );

            break;
        case 'memory_go_top_page':

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_go_top_page');

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/memory_go_top_page.css',
                'type' => 'file'
            );

            // Link a js file
            $block['content']['#attached']['js'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/js/memory_go_top_page.js',
                'type' => 'file'
            );

            break;
        case 'memory_3_columns_block':

            $data['mcb_title'] = variable_get('mcb_title');
            $mcb_text_1 = variable_get('mcb_text_1', array());
            $data['mcb_text_1'] = $mcb_text_1['value'];

            // Bloc 1
            $mcb_column_1 = variable_get('mcb_column_1', array());
            /*
             * $arrayName['image'] correspond to the fid
             * Load the file by its fid.
             * Create the URL file by using the file URI
             */
            $file = file_load($mcb_column_1['mcb_picto']);
            $url = file_create_url($file->uri);
            $data['mcb_column_1_picto'] = $url;

            $data['mcb_column_1_height'] = $mcb_column_1['mcb_height'];
            $data['mcb_column_1_text'] = $mcb_column_1['mcb_text']['value'];

            // Bloc 2
            $mcb_column_2 = variable_get('mcb_column_2', array());
            /*
             * $arrayName['image'] correspond to the fid
             * Load the file by its fid.
             * Create the URL file by using the file URI
             */
            $file = file_load($mcb_column_2['mcb_picto']);
            $url = file_create_url($file->uri);
            $data['mcb_column_2_picto'] = $url;

            $data['mcb_column_2_height'] = $mcb_column_2['mcb_height'];
            $data['mcb_column_2_text'] = $mcb_column_2['mcb_text']['value'];

            // Bloc 3
            $mcb_column_3 = variable_get('mcb_column_3', array());
            /*
             * $arrayName['image'] correspond to the fid
             * Load the file by its fid.
             * Create the URL file by using the file URI
             */
            $file = file_load($mcb_column_3['mcb_picto']);
            $url = file_create_url($file->uri);
            $data['mcb_column_3_picto'] = $url;

            $data['mcb_column_3_height'] = $mcb_column_3['mcb_height'];
            $data['mcb_column_3_text'] = $mcb_column_3['mcb_text']['value'];

            $mcb_text_2 = variable_get('mcb_text_2', array());
            $data['mcb_text_2'] = $mcb_text_2['value'];

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_3_columns_block', $data);

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks') . '/css/memory_3_columns_block.css',
                'type' => 'file'
            );

            break;
        case 'memory_switch_activities':

            $vocabulary = taxonomy_vocabulary_machine_name_load('activite');
            $v_activities = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));

            // Ascendant sorting of group of activities ("Activités de nuits", "Transfert", "Nos packs"...) depending on their weight
            $nb_act = count($v_activities);
            $activities = array();
            $count = 0;
            for ($i = 0; $count < $nb_act; $i++) {
              if (!empty($v_activities[$i])){
                if ($v_activities[$i]->weight == $count) {
                  $activities[$i] = $v_activities[$i];
                  $count++;
                  $i = 0;
                }
              }
            }

            if(isset($_GET["category"]) && !empty($_GET["category"])){ // Get category TID (EVG, EVJF...) coming from intermediate page
              $is_category_target = true;
            }

            /* ------------------------------- Retrieve the destination of the activity ------------------------------- */
            $activity_nid = explode("node/", current_path())[1];
            $activity_node_load = node_load($activity_nid);

            // Get the Destination field value of the activity
            $activity_field_dest = field_get_items("node", $activity_node_load, "field_acti_content_desti");
            // Get the destination TID
            $dest_tid = $activity_field_dest[0]["tid"];

            // Get the Category field value of the activity (Activité de jour, Activité de nuit...)
//            $activity_field_act_cat = field_get_items("node", $activity_node_load, "field_acti_cont_cat");
//            $act_cat_tid = $activity_field_act_cat[0]["tid"];

            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
              ->entityCondition('bundle', 'activite')
              ->propertyCondition('status', 1)
              ->fieldCondition('field_acti_content_desti', 'tid', $dest_tid, '=');
//              ->fieldCondition('field_acti_cont_cat', 'tid', $act_cat_tid, '=');
            $results = $query->execute();

            $array_activities = array();

            foreach ($results["node"] as $result) {

              $node = node_load($result->nid);

              $activity_category_field = field_get_items("node", $node, "field_activity_category");
              $is_node_to_display = false;

              if($is_category_target){ // Mean we need to filter by the activity category targeted (EVG, EVJF...)

                foreach ($activity_category_field as $activity_category){

                  if($activity_category["tid"] == $_GET["category"]){
                    $is_node_to_display = true;
                  }
                }
              }else{
                $is_node_to_display = true;
              }

              if($is_node_to_display){

                $activity_tid_field = field_get_items('node', $node, 'field_acti_cont_cat');
                $activity_tid = $activity_tid_field[0]["tid"];

                $activity_weight_field = field_get_items('node', $node, 'field_weight');
                $activity_weight = ( empty($activity_weight_field[0]["value"]) ) ? 0 : $activity_weight_field[0]["value"];

                $activity_custom_title_field = field_get_items('node', $node, 'field_activity_title');
                $activity_custom_title = $activity_custom_title_field[0]["value"];

                $array_activities[$activities[$activity_tid]->weight][$activity_weight][$node->nid] = array(
                  'custom_title' => $activity_custom_title,
                  'node_nid' => $node->nid,
                );
              }
            }

            // Sort array by activity category weight
            ksort($array_activities);

            foreach ($activities as $activity) {

              // Sort array by activity weight
              krsort($array_activities[$activity->weight]);
            }

            // Construct good array
            $array_activities_refactored = array();

            foreach ($array_activities as $array_activity_weight){

              foreach($array_activity_weight as $array_activity){

                // Sort by activities name alphabetically
                asort($array_activity);

                foreach($array_activity as $array_activity_nid){

                  array_push($array_activities_refactored, $array_activity_nid["node_nid"]);
                }
              }
            }

//          drupal_set_message("<pre>" . print_r($array_activities_refactored, true) . "</pre>");

            // Get the index position of the current activity
            $current_activity_index = array_search($activity_nid, $array_activities_refactored);

            if ($current_activity_index == 0) {

                $previous_activity_nid = $array_activities_refactored[sizeof($array_activities_refactored) - 1];
                $next_activity_nid = $array_activities_refactored[$current_activity_index + 1];

            } elseif ($current_activity_index == (sizeof($array_activities_refactored) - 1)){

                $previous_activity_nid = $array_activities_refactored[$current_activity_index - 1];
                $next_activity_nid = $array_activities_refactored[0];

            }else{

                $previous_activity_nid = $array_activities_refactored[$current_activity_index - 1];
                $next_activity_nid = $array_activities_refactored[$current_activity_index + 1];
            }

            // Set the previous activity PATH
            $previous_activity_path = drupal_get_path_alias("node/" . $previous_activity_nid);

            // Set the next activity PATH
            $next_activity_path = drupal_get_path_alias("node/" . $next_activity_nid);

            // Set the previous activity NAME
            $load_previous_activity_name = node_load($previous_activity_nid);
            $previous_activity_name = $load_previous_activity_name->title;

            // Set the next activity NAME
            $load_next_activity_name = node_load($next_activity_nid);
            $next_activity_name = $load_next_activity_name->title;

            // Set the destination path
            $dest_path = drupal_get_path_alias("taxonomy/term/" . $dest_tid);
            // Set destination name
            $dest_term = taxonomy_term_load($dest_tid);
            $dest_name = $dest_term->name;

            $data['previous_activity_path'] = $previous_activity_path;
            $data['next_activity_path'] = $next_activity_path;
            $data['previous_activity_name'] = $previous_activity_name;
            $data['next_activity_name'] = $next_activity_name;
            $data['destination_path'] = $dest_path;
            $data['destination_name'] = $dest_name;

            // Link the template
            $block['content']['#markup'] = theme('tpl_memory_switch_activities', $data);

            // Link a css file
            $block['content']['#attached']['css'][] = array(
                'data' => drupal_get_path('module', 'memory_blocks').'/css/memory-switch-activities.css',
                'type' => 'file'
            );

            break;
    }

    return $block;
}

function memory_blocks_3_columns_block_admin_form($form, &$form_state){

    $form['mcb_title'] = array(
        '#type' => 'textfield',
        '#default_value' => variable_get('mcb_title', 'L\'agence de voyage déjantée'),
        '#title' => t('Titre'),
        '#weight' => 1,
    );

    $mcb_text_1 = variable_get('mcb_text_1', array());

    $form['mcb_text_1'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $mcb_text_1['value'],
        '#title' => t('Texte n°1'),
        '#weight' => 1,
    );

    /* Column 1 */
    $mcb_column_1 = variable_get('mcb_column_1', array());

    $form['mcb_column_1'] = array(
        '#type' => 'fieldset',
        '#title' => t('Column n°1'),
        '#weight' => 3,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $form['mcb_column_1']['mcb_picto'] = array(
        '#type'          => 'media',
        '#title'         => 'Bloc 1 - Pictogramme',
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $mcb_column_1['mcb_picto'], //The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'icons_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 1,
    );

    $form['mcb_column_1']['mcb_height'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
      ),
      '#default_value' => $mcb_column_1['mcb_height'],
      '#title' => t('Height of the pictogram'),
      '#weight' => 2,
    );

    $form['mcb_column_1']['mcb_text'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $mcb_column_1['mcb_text']['value'],
        '#title' => t('Bloc 1 - Texte'),
        '#weight' => 3,
    );

    /* Column 2 */
    $mcb_column_2 = variable_get('mcb_column_2', array());

    $form['mcb_column_2'] = array(
        '#type' => 'fieldset',
        '#title' => t('Column n°2'),
        '#weight' => 4,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $form['mcb_column_2']['mcb_picto'] = array(
        '#type'          => 'media',
        '#title'         => 'Bloc 2 - Pictogramme',
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $mcb_column_2['mcb_picto'], //The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'icons_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 1,
    );

    $form['mcb_column_2']['mcb_height'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
      ),
      '#default_value' => $mcb_column_2['mcb_height'],
      '#title' => t('Height of the pictogram'),
      '#weight' => 2,
    );

    $form['mcb_column_2']['mcb_text'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $mcb_column_2['mcb_text']['value'],
        '#title' => t('Bloc 2 - Texte'),
        '#weight' => 3,
    );

    /* Column 3 */
    $mcb_column_3 = variable_get('mcb_column_3', array());

    $form['mcb_column_3'] = array(
        '#type' => 'fieldset',
        '#title' => t('Column n°3'),
        '#weight' => 5,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $form['mcb_column_3']['mcb_picto'] = array(
        '#type'          => 'media',
        '#title'         => 'Bloc 3 - Pictogramme',
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $mcb_column_3['mcb_picto'], //The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'icons_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 1,
    );

    $form['mcb_column_3']['mcb_height'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
      ),
      '#default_value' => $mcb_column_3['mcb_height'],
      '#title' => t('Height of the pictogram'),
      '#weight' => 2,
    );

    $form['mcb_column_3']['mcb_text'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $mcb_column_3['mcb_text']['value'],
        '#title' => t('Bloc 3 - Texte'),
        '#weight' => 3,
    );

    $mcb_text_2 = variable_get('mcb_text_2', array());

    $form['mcb_text_2'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $mcb_text_2['value'],
        '#title' => t('Texte n°2'),
        '#weight' => 6,
    );

    return system_settings_form($form);
}

function memory_blocks_top_destinations_admin_form($form, &$form_state) {

    global $base_url;

    $form['top_destinations_nb'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
      ),
      '#default_value' => variable_get('top_destinations_nb', 9),
      '#title' => t('Number of Top Destinations'),
      '#description' => t('By default the number of Top Destinations equals to 9 but if you can change this number filling this field then save the configuration.'),
      '#required' => TRUE,
      '#weight' => 1,
    );

    $form['top_destinations_title'] = array(
        '#type' => 'textfield',
        '#default_value' => variable_get('top_destinations_title', 'Top destinations'),
        '#title' => t('Titre'),
        '#weight' => 3,
        '#required' => TRUE,
    );

    $description = variable_get('top_destinations_description', array('Entrer ici votre description.' => '', 'format' => NULL));

    $form['top_destinations_description'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $description['value'],
        '#title' => t('Description'),
        '#weight' => 4,
    );

    /* Top destination */
    for( $i = 1 ; $i <= variable_get('top_destinations_nb') ; $i++ ){

        $top_destinations_nbr = variable_get('top_destinations_' . $i, array());

        $form['top_destinations_' . $i] = array(
            '#type' => 'fieldset',
            '#title' => (!empty($top_destinations_nbr['name'])) ? t('Destination - ' . $top_destinations_nbr['name']) : t('Destination'),
            '#weight' => 4 + $i,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE,
            '#prefix' =>
              '<div style="position:relative;">' .
                '<p style="position: absolute;top: 7px;right: 10px;height: auto;margin: 0;display: flex;flex-direction: row;align-items: center;">' .
                  $top_destinations_nbr['weight'] .
                  '&nbsp<span style="display: block;width: 15px;height: 15px;border-radius: 50px;background-color:' . (($top_destinations_nbr['display'] == 0) ? '#46D00E' : '#ECAD1D') . '"></span>' .
                '</p>',
            '#suffix' => '</div>',
        );

        $form['top_destinations_' . $i]['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $top_destinations_nbr['name'],
        );
        $form['top_destinations_' . $i]['image'] = array(
            '#type'          => 'media',
            '#title'         => 'Image',
            '#theme'         => 'media_widget', // Without that, you only get text input
            '#default_value' => $top_destinations_nbr['image'], //The fid
            '#media_options' => array(
                'global' => array(
                    'file_directory'  => 'image_folder',
                    'file_extensions' => 'png gif jpg jpeg',
                    'max_filesize'    => '2 MB',
                    'uri_scheme'      => 'public',
                    'types'           => array('image'),
                    'schemes'         => array(
                        'public' => 'public',
                    ),
                ),
            ),
        );
        $form['top_destinations_' . $i]['url'] = array(
            '#field_prefix' => $base_url,
            '#type' => 'textfield',
            '#title' => t('URL'),
            '#default_value' => $top_destinations_nbr['url'],
            '#maxlength' => 512,
        );

        $form['top_destinations_' . $i]['display'] = array(
          '#type' => 'radios',
          '#title' => t('Affichage'),
          '#default_value' => (isset($top_destinations_nbr['display'])) ? $top_destinations_nbr['display'] : 1,
          '#options' => array(0 => "Publié", 1 => "Non publié"),
        );

        $form['top_destinations_' . $i]['weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#default_value' => $top_destinations_nbr['weight'],
          '#delta' => 25,
          '#description' => 'Destination with the higher weight will be display in first.',
        );
    }

    return system_settings_form($form);
}

/**
 * @param $form
 * @param $form_state
 * @return mixed
 */
function memory_blocks_top_activities_admin_form($form, &$form_state) {

    global $base_url;

    $form['top_activities_nb'] = array(
      '#type' => 'textfield',
      '#attributes' => array(
        ' type' => 'number', // insert space before attribute name
        ' min' => '0',
      ),
      '#default_value' => variable_get('top_activities_nb', 9),
      '#title' => t('Number of Top Activities'),
      '#description' => t('By default the number of Top Activities equals to 9 but if you can change this number filling this field then save the configuration.'),
      '#required' => TRUE,
      '#weight' => 1,
    );

    $form['top_activities_title'] = array(
        '#type' => 'textfield',
        '#default_value' => variable_get('top_activities_title', 'Top activités'),
        '#title' => t('Titre'),
        '#weight' => 2,
        '#required' => TRUE,
    );

    $description = variable_get('top_activities_description', array('Entrer ici votre description.' => '', 'format' => NULL));

    $form['top_activities_description'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#default_value' => $description['value'],
        '#title' => t('Description'),
        '#weight' => 3,
    );

    /* Top activity */
    for( $i = 1 ; $i <= variable_get('top_activities_nb') ; $i++ ){

        $top_activities_nbr = variable_get('top_activities_' . $i, array());

        $form['top_activities_' . $i] = array(
            '#type' => 'fieldset',
            '#title' => (!empty($top_activities_nbr['name'])) ? t('Activity - ' . $top_activities_nbr['name']) : t('Activity'),
            '#weight' => 3 + $i,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE,
            '#prefix' =>
              '<div style="position:relative;">' .
              '<p style="position: absolute;top: 7px;right: 10px;height: auto;margin: 0;display: flex;flex-direction: row;align-items: center;">' .
              $top_activities_nbr['weight'] .
              '&nbsp<span style="display: block;width: 15px;height: 15px;border-radius: 50px;background-color:' . (($top_activities_nbr['display'] == 0) ? '#46D00E' : '#ECAD1D') . '"></span>' .
              '</p>',
            '#suffix' => '</div>',
        );

        $form['top_activities_' . $i]['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $top_activities_nbr['name'],
        );

        $form['top_activities_' . $i]['image'] = array(
            '#type'          => 'media',
            '#title'         => 'Image',
            '#theme'         => 'media_widget', // Without that, you only get text input
            '#default_value' => $top_activities_nbr['image'], //The fid
            '#media_options' => array(
                'global' => array(
                    'file_directory'  => 'image_folder',
                    'file_extensions' => 'png gif jpg jpeg',
                    'max_filesize'    => '2 MB',
                    'uri_scheme'      => 'public',
                    'types'           => array('image'),
                    'schemes'         => array(
                        'public' => 'public',
                    ),
                ),
            ),
        );
        $form['top_activities_' . $i]['url'] = array(
            '#field_prefix' => $base_url,
            '#type' => 'textfield',
            '#title' => t('URL'),
            '#default_value' => $top_activities_nbr['url'],
            '#maxlength' => 512,
        );

        $form['top_activities_' . $i]['display'] = array(
          '#type' => 'radios',
          '#title' => t('Affichage'),
          '#default_value' => (isset($top_activities_nbr['display'])) ? $top_activities_nbr['display'] : 1,
          '#options' => array(0 => "Publié", 1 => "Non publié"),
        );

        $form['top_activities_' . $i]['weight'] = array(
          '#type' => 'weight',
          '#title' => t('Weight'),
          '#default_value' => $top_activities_nbr['weight'],
          '#delta' => 25,
          '#description' => 'Activity with the higher weight will be display in first.',
        );
    }

    return system_settings_form($form);
}

function memory_blocks_slider_admin_form($form, &$form_state){

    /* Slider - Global options */
    $form['slider_type'] = array(
        '#type' => 'radios',
        '#title' => t('Type d\'affichage'),
        '#default_value' => variable_get('slider_type', 0),
        '#options' => array(
            0 => t('Slider d\'images'),
            1 => t('Vidéo'),
            2 => t('Image fixe'),
        ),
        '#description' => t('Choisir le type d\'affichage souhaité.'),
        '#required' => TRUE,
        '#weight' => 1,
    );

    $form['slider_height'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            ' type' => 'number', // insert space before attribute name :)
        ),
        '#default_value' => variable_get("slider_height", "550"),
        '#title' => t('Hauteur du slider'),
        '#description' => t('Indiquer la hauteur du slider en pixel.'),
        '#maxlength' => 5,
        '#required' => TRUE,
        '#weight' => 2,
    );

    $form['slider_time_interval'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
            ' type' => 'number', // insert space before attribute name :)
        ),
        '#default_value' => variable_get("slider_time_interval", "10000"),
        '#title' => t('Interval de temps du slider'),
        '#description' => t('Indiquer l\'interval de temps du slider pour lequel l\'image suivante apparaîtra.'),
        '#maxlength' => 5,
        '#required' => TRUE,
        '#weight' => 3,
    );

    /* Slider images */
    $form['slider'] = array(
        '#type' => 'fieldset',
        '#title' => t('Slider images'),
        '#weight' => 4,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $slider = variable_get('slider', array());

    for( $i = 1 ; $i <= 8 ; $i++ ){

        $form['slider']['image_container_'.$i] = array(
            '#type' => 'fieldset',
            '#title' => t('Image n°'.$i),
            '#weight' => $i,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE
        );

        $form['slider']['image_container_'.$i]['name'] = array(
            '#type' => 'textfield',
            '#title' => t('Nom'),
            '#default_value' => $slider['image_container_'.$i]['name'],
            '#weight' => 1,
        );

        $form['slider']['image_container_'.$i]['image'] = array(
            '#type'          => 'media',
            '#title' => t('Image'),
            '#theme'         => 'media_widget', // Without that, you only get text input
            '#default_value' => $slider['image_container_'.$i]['image'], // The fid
            '#media_options' => array(
                'global' => array(
                    'file_directory'  => 'image_folder',
                    'file_extensions' => 'png gif jpg jpeg',
                    'max_filesize'    => '2 MB',
                    'uri_scheme'      => 'public',
                    'types'           => array('image'),
                    'schemes'         => array(
                        'public' => 'public',
                    ),
                ),
            ),
            '#weight' => 2,
        );

        $form['slider']['image_container_'.$i]['redirection_link'] = array(
            '#type' => 'textfield',
            '#title' => t('Lien de redirection'),
            '#default_value' => $slider['image_container_'.$i]['redirection_link'],
            '#maxlength' => 512,
            '#weight' => 3,
        );
    }

    /* Video */
    $form['video'] = array(
        '#type' => 'fieldset',
        '#title' => t('Vidéo'),
        '#weight' => 5,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $video = variable_get('video', array());

    $form['video']['video'] = array(
        '#type'          => 'media',
        '#title' => t('Upload video'),
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $video['video'], // The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'videos',
                'file_extensions' => 'mov mp4',
                'max_filesize'    => '200 MB',
                'uri_scheme'      => 'public',
                'types'           => array('video'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 0,
    );

    $form['video']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#default_value' => $video['name'],
        '#weight' => 1,
    );

    $form['video']['autoplay'] = array(
        '#type' => 'radios',
        '#title' => t('Autoplay'),
        '#default_value' => $video['autoplay'],
        '#options' => array(
            0 => t('Désactiver'),
            1 => t('Activer'),
        ),
        '#description' => t("L'autoplay permet de jouer automatiquement la vidéo lorsque l'utilisateur visite la page sur laquelle elle se trouve.<br>A noter que les navigateurs tels que Safari et Chrome, ne permettent plus de lancer automatiquement une vidéo avec du son."),
        '#weight' => 3,
    );

    $form['video']['controls'] = array(
        '#type' => 'radios',
        '#title' => t('Controls'),
        '#default_value' => $video['controls'],
        '#options' => array(
            0 => t('Désactiver'),
            1 => t('Activer'),
        ),
        '#description' => t("Controls affiche les outils de gestion de la vidéo (pause...)."),
        '#weight' => 4,
    );

    $form['video']['loop'] = array(
        '#type' => 'radios',
        '#title' => t('Loop'),
        '#default_value' => $video['loop'],
        '#options' => array(
            0 => t('Désactiver'),
            1 => t('Activer'),
        ),
        '#description' => t("Loop permet de jouer la vidéo à l'infini."),
        '#weight' => 5,
    );

    $form['video']['poster'] = array(
        '#type' => 'radios',
        '#title' => t('Poster'),
        '#default_value' => $video['poster'],
        '#options' => array(
            0 => t('Désactiver'),
            1 => t('Activer'),
        ),
        '#description' => t("Image a affiché lorsque la vidéo charge."),
        '#weight' => 7,
    );

    $form['video']['poster_image'] = array(
        '#type'          => 'media',
        '#title' => t('Image'),
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $video['poster_image'], // The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'image_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 8,
    );

    $form['video']['redirection_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Lien de redirection'),
        '#default_value' => $video['redirection_link'],
        '#maxlength' => 512,
        '#weight' => 9,
    );

    /* Still image */
    $form['still_img'] = array(
        '#type' => 'fieldset',
        '#title' => t('Image fixe'),
        '#weight' => 6,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#tree' => TRUE
    );

    $still_img = variable_get('still_img', array());

    $form['still_img']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nom'),
        '#default_value' => $still_img['name'],
        '#weight' => 1,
    );

    $form['still_img']['image'] = array(
        '#type'          => 'media',
        '#title' => t('Image'),
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => $still_img['image'], // The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'image_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 2,
    );

    $form['still_img']['redirection_link'] = array(
        '#type' => 'textfield',
        '#title' => t('Lien de redirection'),
        '#default_value' => $still_img['redirection_link'],
        '#maxlength' => 512,
        '#weight' => 3,
    );

    return system_settings_form($form);
}

function memory_blocks_activity_families_admin_form($form, &$form_state){

  $vocabulary = taxonomy_vocabulary_machine_name_load("activity_families");
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  $array_activity_families = array(
    "_none" => t('- Aucun(e) -')
  );
  foreach ($terms as $term){
    $array_activity_families[$term->tid] = $term->name;
  }

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'activite', '=');
  $query->orderBy('n.title', 'asc');
  $query->distinct();
  $results = $query->execute();

  $form["markup_table_top"] = array(
    '#type' => 'markup',
    '#markup' =>
      '<table>' .
      '<tr>' .
      '<th>Titre</th>' .
      '<th>Ville</th>' .
      '<th>Famille</th>' .
      '</tr>'
    ,
  );

  $previous_values = array();

  foreach( $results as $result ){

    $node = node_load($result->nid);

//      drupal_set_message("<pre>" . print_r($node, true) . "</pre>");

    $activity_custom_title_field = field_get_items("node", $node, "field_activity_title");
    $activity_custom_title = $activity_custom_title_field[0]["value"];

    $activity_destination_field = field_get_items("node", $node, "field_acti_content_desti");
    $activity_destination = $activity_destination_field[0]["tid"];

    $activity_family_field = field_get_items('node', $node, 'field_activity_family');

    $key_activity_family = [];
    $temp_array_families = array();
    foreach ($activity_family_field as $activity_family) {

      if (isset($activity_family)) {

        $activity_family_term = taxonomy_term_load($activity_family["tid"]);

        $key_activity_family[array_search($activity_family_term->name, $array_activity_families)] = array_search($activity_family_term->name, $array_activity_families);

        array_push($temp_array_families, $activity_family_term->tid);
      }
    }

    if(sizeof($temp_array_families) != 0){
      $previous_values[$node->nid] = $temp_array_families;
    }else{
      $previous_values[$node->nid] = ["_none"];
    }

    if(sizeof($key_activity_family) == 0){
      $key_activity_family = ["_none"];
    }

    $taxonomy = taxonomy_term_load($activity_destination);

    $form["markup_top_" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '<tr>',
    );

    $form["title_" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '<td>' . $activity_custom_title . '</td>',
    );

    $form["city_" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '<td>' . $taxonomy->name . '</td>',
    );

    $form["category_markup_top" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '<td>',
    );

    $form["category_" . $result->nid] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => $array_activity_families,
      '#default_value' => $key_activity_family,
    );

    $form["category_markup_bottom" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '</td>',
    );

    $form["markup_bottom_" . $result->nid] = array(
      '#type' => 'markup',
      '#markup' => '</tr>',
    );
  }

  $form["markup_table_bottom"] = array(
    '#type' => 'markup',
    '#markup' => '</table>' ,
  );

  $form['activity_families']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Enregistrer'),
    '#weight' => 10,
  );

  $form["previous_values"] = array(
    '#type' => 'value',
    '#value' => $previous_values,
  );

  $form['activity_families']['submit']['#validate'][] = 'memory_blocks_activity_families_admin_form_validate';
  $form['activity_families']['submit']['#submit'][] = 'memory_blocks_activity_families_admin_form_submit';

  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function memory_blocks_activity_families_admin_form_validate($form, &$form_state){

  foreach ($form_state['values'] as $key => $value){

    if(strpos($key, "category_") !== false) {

      $el_count = 0;

      foreach ($value as $new_el) {

        if($new_el != "_none"){

          $el_count++;
        }
      }

      if($el_count > 2){

        $activity_nid = explode("category_", $key)[1];

        try {
          $node = node_load($activity_nid);

          $activity_custom_title_field = field_get_items("node", $node, "field_activity_title");
          $activity_custom_title = $activity_custom_title_field[0]["value"];

          $activity_destination_field = field_get_items("node", $node, "field_acti_content_desti");
          $activity_destination = $activity_destination_field[0]["tid"];

          $taxonomy = taxonomy_term_load($activity_destination);

          form_set_error($key, "L'activité " . $activity_custom_title . " localisée à " . $taxonomy->name . " contient plus de 2 familles d'activités.");
        } catch (Exception $e) {
          form_set_error($key, "L'activité " . $activity_nid . " contient plus de 2 familles d'activités.");
        }
      }
    }
  }
}

/**
 * @param $form
 * @param $form_state
 * @throws Exception
 */
function memory_blocks_activity_families_admin_form_submit($form, &$form_state){

  $isChangeMade = false;

  foreach ($form_state['values'] as $key => $value){

    if(strpos($key, "category_") !== false){

      $activity_nid = explode("category_", $key)[1];

      $isActivityFamiliesChanged = false;

      foreach ($value as $new_el){

        if(!in_array($new_el, $form_state['values']['previous_values'][$activity_nid])){ // Check for new elements

          $isActivityFamiliesChanged = true;
        }
      }

      if($isActivityFamiliesChanged){

        /* Delete all activity families related to the node */
        // Delete Data Field
        db_delete('field_data_field_activity_family')
          ->condition('entity_id', intval($activity_nid))
          ->execute();

        // Delete Revision Field
        db_delete('field_revision_field_activity_family')
          ->condition('entity_id', intval($activity_nid))
          ->execute();

        /* Add new activity families related to the node */
        $delta = 0;
        foreach ($value as $new_el){

          if($new_el != "_none"){

            $isChangeMade = true;

//            drupal_set_message("New element : " . $new_el);

            // Insert Data Field
            db_insert('field_data_field_activity_family')
              ->fields(
                array(
                  'entity_type' => 'node',
                  'bundle' => 'activite',
                  'deleted' => 0,
                  'entity_id' => intval($activity_nid),
                  'revision_id' => intval($activity_nid),
                  'language' => 'und',
                  'delta' => $delta,
                  'field_activity_family_tid' => intval($new_el),
                )
              )
              ->execute();

            // Insert Data Field
            db_insert('field_revision_field_activity_family')->fields(
              array(
                'entity_type' => 'node',
                'bundle' => 'activite',
                'deleted' => 0,
                'entity_id' => intval($activity_nid),
                'revision_id' => intval($activity_nid),
                'language' => 'und',
                'delta' => $delta,
                'field_activity_family_tid' => intval($new_el),
              )
            )
              ->execute();

            $delta++;
          }
        }
      }
    }
  }

  if($isChangeMade){
    drupal_flush_all_caches();
    drupal_set_message(t('1) Les données ont été modifiées.'));
    drupal_set_message(t('2) Le cache a été vidé.'));
  }
}

function memory_blocks_all_destinations_page_admin_form($form, &$form_state){

  $form['all_dest_image'] = array(
    '#type'          => 'media',
    '#title' => t('Image'),
    '#theme'         => 'media_widget', // Without that, you only get text input
    '#default_value' => variable_get('all_dest_image'), // The fid
    '#media_options' => array(
      'global' => array(
        'file_directory'  => 'image_folder',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize'    => '2 MB',
        'uri_scheme'      => 'public',
        'types'           => array('image'),
        'schemes'         => array(
          'public' => 'public',
        ),
      ),
    ),
    '#weight' => 1,
  );

  $form['all_dest_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => variable_get('all_dest_title'),
    '#maxlength' => 512,
    '#weight' => 2,
  );

  $all_dest_description = variable_get('all_dest_description', array());

  $form['all_dest_description'] = array(
    '#type' => 'text_format',
    '#format' => 'wysiwyg',
    '#title' => t('Description'),
    '#default_value' => $all_dest_description['value'],
    '#weight' => 3,
  );

  return system_settings_form($form);
}

function memory_blocks_all_activities_page_admin_form($form, &$form_state){

    $form['all_act_image'] = array(
        '#type'          => 'media',
        '#title' => t('Image'),
        '#theme'         => 'media_widget', // Without that, you only get text input
        '#default_value' => variable_get('all_act_image'), // The fid
        '#media_options' => array(
            'global' => array(
                'file_directory'  => 'image_folder',
                'file_extensions' => 'png gif jpg jpeg',
                'max_filesize'    => '2 MB',
                'uri_scheme'      => 'public',
                'types'           => array('image'),
                'schemes'         => array(
                    'public' => 'public',
                ),
            ),
        ),
        '#weight' => 1,
    );

    $form['all_act_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => variable_get('all_act_title'),
        '#maxlength' => 512,
        '#weight' => 2,
    );

    $all_act_description = variable_get('all_act_description', array());

    $form['all_act_description'] = array(
        '#type' => 'text_format',
        '#format' => 'wysiwyg',
        '#title' => t('Description'),
        '#default_value' => $all_act_description['value'],
        '#weight' => 3,
    );

    return system_settings_form($form);
}

function memory_blocks_intermediate_page_admin_form($form, &$form_state){

    // Include pathauto to clean a string for use in URLs in order to compare with the current URL
    module_load_include('inc', 'pathauto', 'pathauto');

//    $limit = 20;

//    $query = db_select('node', 'n')->extend('PagerDefault');
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title'))
//      ->limit($limit)
      ->condition('n.type', 'activite', '=')
      ->orderBy('n.title', 'asc')
      ->distinct();
    $results = $query->execute()->fetchAllKeyed(0, 1);

//    $pager = theme('pager', array("quantity" => 5));

    foreach( $results as $result ) {

        $nid = array_search($result, $results);
        $node = node_load($nid);

        $activity_img_field = field_get_items("node", $node, "field_img_activite");
        $activity_img_fid = $activity_img_field[0]["fid"];

//        drupal_set_message("-------------------------------");
//        drupal_set_message("Nom : " . $result);
//        drupal_set_message("Image ID : " . $activity_img_fid);

        $cleaned_title = pathauto_cleanstring($result);

        /* Video */
        $form["fieldset_" . $cleaned_title] = array(
            '#type' => 'fieldset',
            '#title' => $result,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#tree' => TRUE
        );

        $intermediate_page = variable_get("fieldset_" . $cleaned_title, array());

//        drupal_set_message("<pre>" . print_r($intermediate_page, true) . "</pre>");
//        drupal_set_message($intermediate_page["ip_image"]);

        // Define default image if it is not set
        if(empty($intermediate_page['ip_image'])){
          $intermediate_page['ip_image'] = $activity_img_fid;
        }

        $form["fieldset_" . $cleaned_title]["ip_image"] = array(
            '#type'          => 'media',
            '#title' => t('Image'),
            '#theme'         => 'media_widget', // Without that, you only get text input
            '#default_value' => $intermediate_page['ip_image'], // The fid
            '#media_options' => array(
                'global' => array(
                    'file_directory'  => 'image_folder',
                    'file_extensions' => 'png gif jpg jpeg',
                    'max_filesize'    => '2 MB',
                    'uri_scheme'      => 'public',
                    'types'           => array('image'),
                    'schemes'         => array(
                        'public' => 'public',
                    ),
                ),
            ),
        );

        $form["fieldset_" . $cleaned_title]["ip_description"] = array(
            '#type' => 'text_format',
            '#format' => 'wysiwyg',
            '#title' => t('Description'),
            '#default_value' => $intermediate_page['ip_description']['value'],
        );
    }

//    $form['pager'] = array(
//      '#markup' => $pager,
//    );

    return system_settings_form($form);
}

function memory_blocks_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id)  {
    case 'activite_node_form':

//      drupal_set_message($form_id);  // print form ID to messages
//      drupal_set_message(print_r($form, TRUE));  // print array to messages

      $form['language']['#required'] = TRUE;

      $form['title']['#title'] = "Titre Drupal";
      $form['title']['#description'] = "Titre non affiché, mais utilisé pour les pages intermédiaires et la page toutes nos activités.";

      $form['field_img_activite'][LANGUAGE_NONE][0]['#title'] = "Image de l'activité";
      $form['field_img_activite'][LANGUAGE_NONE][0]['#required'] = TRUE;

      break;
  }
}

